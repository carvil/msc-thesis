values

db : ToolsDB = mk_ToolsDB(toolTab,contactTab,funcTab,sysTab,techTab);

toolTab : ToolTable = { |-> };
contactTab : ContactTable = { |-> };
funcTab : FunctionalityTable = { |-> }; 
sysTab : SystemRequirementsTable = { |-> };
techTab : TechnicalDetailsTable = { |-> };


tool1 : Tool = mk_Tool("Alloy Analyzer","","Specification and design analysis","","Alloy","Free",1,1,1,1);address1 : Address = mk_Address("","","","","");contact1 : Contact = mk_Contact("Daniel Jackson","Software Design Group, MIT",address1,"alloy@mit.edu","","","");functionality1 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<NO>,<NO>,<NO>,<YES>,<YES>,<YES>,<YES>,<NO>);systemRequirement1 : SystemRequirements = mk_SystemRequirements("OS X, Windows, Linux","",">= 1GB RAM preferable","");date1 : Date = mk_Date(01,01,2008);documentation1 : Documentation = mk_Documentation("","Software Abstractions, Daniel Jackson, MIT Press, 2006","","http://alloy.mit.edu and http://softwareabstractions.org","");technicalDetails1 : TechnicalDetails = mk_TechnicalDetails("4.0","",date1,"Java",documentation1);
tool2 : Tool = mk_Tool("Why","Why is a software verification platform.

This platform contains several tools:

    * a general-purpose verification condition generator (VCG), Why, which is used as a back-end by other verification tools (see below) but which can also be used directly to verify programs (see for instance these examples) ;
    * a tool Caduceus for the verification of C programs ;
    * a tool Krakatoa for the verification of Java programs. 

One of the main features of Why is to be integrated with many existing provers (proof assistants such as Coq, PVS, Isabelle/HOL, HOL 4, HOL Light, Mizar and decision procedures such as Simplify, Ergo, Yices, Z3, CVC Lite, etc.).","Static verification, advanced behavioral properties, both automatic and interactive proofs","Complex algorithms
Critical industrial code","ANSI C (Caduceus and ACSL)
Java (JML-like, ACSL features) 
Java Card (JML-like, ACSL features)
","open source, GPL licence",2,2,2,2);address2 : Address = mk_Address("Parc Orsay Université","91893","Orsay","","France");contact2 : Contact = mk_Contact("Claude Marché","INRIA",address2,"Claude.Marche@inria.fr","+33  1 72 92 59 69","","http://why.lri.fr");functionality2 : Functionality = mk_Functionality(<YES>,<YES>,<YES>,<YES>,<NO>,<NO>,<NO>,<YES>,<NO>,<NO>,<NO>);systemRequirement2 : SystemRequirements = mk_SystemRequirements("","","","");date2 : Date = mk_Date(01,01,2008);documentation2 : Documentation = mk_Documentation("","","","http://why.lri.fr/","");technicalDetails2 : TechnicalDetails = mk_TechnicalDetails("2.10","Connection with the new Frama-C platform, developed jointly with CEA List, Saclay, France",date2,"",documentation2);
tool15 : Tool = mk_Tool("mbt.tigris.org","org.tigris.mbt is an implementation of Model-based testing built in java. It allows you to generate test sequences from a finite-state machine (graph). The test sequences can be created statically, or run dynamically.

The tool itself supports no actual modeling. This is done in a separate tool, yEd from yWorks, which is available as a free download with unrestricted functionality. But org.tigris.mbt should work with any graphml-compatible editor. I would like some feed back in this area.

The tool can be integrated into other test tools such as Quick Test Professional, WinRunner, Functional Tester, SilkTest LoadRunner, Win32::GuiTest or even tools made by you. Also integration with Perl is no problem, and of course, Java. What org.tigris.mbt does, is giving the test execution engines the test sequences, statically or dynamically.","org.tigris.mbt is an implementation of Model-based testing built in java. It allows you to generate test sequences from a finite-state machine (graph). The test sequences can be created statically, or run dynamically.","Testing, QA","Java","Open source",15,15,15,15);address15 : Address = mk_Address("V","","","","");contact15 : Contact = mk_Contact("Kristian Karl","Prolore",address15,"","","","");functionality15 : Functionality = mk_Functionality(<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>);systemRequirement15 : SystemRequirements = mk_SystemRequirements("","","","");date15 : Date = mk_Date(01,01,2008);documentation15 : Documentation = mk_Documentation("","","","","");technicalDetails15 : TechnicalDetails = mk_TechnicalDetails("","",date15,"",documentation15);
tool20 : Tool = mk_Tool("mbt.tigris.org","org.tigris.mbt is an implementation of Model-based testing built in java. It allows you to generate test sequences from a finite-state machine (graph). The test sequences can be created statically, or run dynamically.

The tool itself supports no actual modeling. This is done in a separate tool, yEd from yWorks, which is available as a free download with unrestricted functionality. But org.tigris.mbt should work with any graphml-compatible editor. I would like some feed back in this area.

The tool can be integrated into other test tools such as Quick Test Professional, WinRunner, Functional Tester, SilkTest LoadRunner, Win32::GuiTest or even tools made by you. Also integration with Perl is no problem, and of course, Java. What org.tigris.mbt does, is giving the test execution engines the test sequences, statically or dynamically.","org.tigris.mbt is an implementation of Model-based testing built in java. It allows you to generate test sequences from a finite-state machine (graph). The test sequences can be created statically, or run dynamically.","Testing, QA","Java","Open source",20,20,20,20);address20 : Address = mk_Address("Västmannagatan 43","11325","Stockholm","","Sweden");contact20 : Contact = mk_Contact("Kristian Karl","Prolore",address20,"kristian.karl@prolore.se","","","");functionality20 : Functionality = mk_Functionality(<NO>,<NO>,<NO>,<NO>,<SOME>,<NO>,<NO>,<NO>,<NO>,<YES>,<NO>);systemRequirement20 : SystemRequirements = mk_SystemRequirements("Any that java supports","n/a","n/a","n/a");date20 : Date = mk_Date(01,12,2007);documentation20 : Documentation = mk_Documentation("","","","mbt.tigris.org","");technicalDetails20 : TechnicalDetails = mk_TechnicalDetails("1.15","2",date20,"java",documentation20);
tool25 : Tool = mk_Tool("ArgoUML","ArgoUML is a modelling tool for UML.","Modelling
Code generation
Reverse engineering","Requirement capture
Analysis
System modelling
Design
","UML","Open Source",25,25,25,25);address25 : Address = mk_Address("","","","","");contact25 : Contact = mk_Contact("Linus Tolke","",address25,"linus@tigris.org","","","http://argouml.tigris.org");functionality25 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<SOME>,<YES>,<SOME>,<NO>,<YES>,<YES>,<NO>,<YES>);systemRequirement25 : SystemRequirements = mk_SystemRequirements("Java","","128M","10M");date25 : Date = mk_Date(20,01,2008);documentation25 : Documentation = mk_Documentation("","","http://argouml.tigris.org/docs","http://argouml.tigris.org/","");technicalDetails25 : TechnicalDetails = mk_TechnicalDetails("0.24","Move to UML2.",date25,"Java",documentation25);
tool32 : Tool = mk_Tool("JML Common Tools","","Runtime assertion checking,
extended static checking,
verification,
documentation of class libraries and frameworks.","Javacard, security of Javacard and voting systems,
teaching.","JML (The Java Modeling Language)","Open source (GPL), from jmlspecs.sourceforge.net",32,32,32,32);address32 : Address = mk_Address("4000 Central Florida Blvd.,","32816-2362","Orlando","Florida","USA");contact32 : Contact = mk_Contact("Gary T. Leavens","University of Central Florida, School of EECS",address32,"leavens@eecs.ucf.edu","+1(407)823-4758","+1-407-823-5419","http://www.jmlspecs.org/");functionality32 : Functionality = mk_Functionality(<YES>,<YES>,<SOME>,<NO>,<NO>,<NO>,<NO>,<SOME>,<SOME>,<YES>,<NO>);systemRequirement32 : SystemRequirements = mk_SystemRequirements("Any with Java (JDK 1.4.2 or better)","","","");date32 : Date = mk_Date(05,01,2008);documentation32 : Documentation = mk_Documentation("","Featured in the KeY book","Many, see http://www.cs.iastate.edu/~leavens/JML/papers.shtml","http://www.eecs.ucf.edu/~leavens/JML/documentation.shtml","");technicalDetails32 : TechnicalDetails = mk_TechnicalDetails("5.5","Support for Java 5, Eclipse support",date32,"Java",documentation32);
tool37 : Tool = mk_Tool("Overture","Overture is a community-based project to develop next generation tools supporting formal modeling and analysis in the design of computer-based systems.
Overture\'s mission is twofold:
    * to provide an industrial-strength tool that supports the use of precise abstract models in software development, and
    * to foster an environment that allows researchers and other interested parties to experiment with modifications and extensions to the tool.","Formal software development, analysis, formal modeling","Formal Methods","VDM++","Open source, GPL license.",37,37,37,37);address37 : Address = mk_Address("Dalgas Avenue","DK-8000","Aarhus","","Denmark");contact37 : Contact = mk_Contact("Peter Gorm Larsen","Engineering College of Aarhus, Computer Technology & Embedded Systems",address37,"pgl@iha.dk","+45 87 30 24 10","+45 87 30 22 01","http://staff.iha.dk/pgl/");functionality37 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<SOME>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>,<NO>);systemRequirement37 : SystemRequirements = mk_SystemRequirements("All","","","");date37 : Date = mk_Date(01,01,2008);documentation37 : Documentation = mk_Documentation("","","http://www.overturetool.org/twiki/bin/view/Main/OverturePubs","http://www.overturetool.org/","");technicalDetails37 : TechnicalDetails = mk_TechnicalDetails("","Proof obligations generation, model checking support, interactive proof support, test generation support, code generation support, reverse engineering support, UML visualization support, interpreter, pretty-printing, OML syntax highlighting visualization support for execution traces, GUI generator, among other topics.",date37,"Java, eclipse",documentation37);
tool41 : Tool = mk_Tool("VDMTools","VDMTools is a set of tools that allows you to develop and analyse precise models of computing systems. When used in the early stages of system development, these models can serve as system speci&#64257;cations, or as an aid in checking the consistency and completeness of user requirements. The models are expressed either in the ISO VDM-SL standard language or in the ob ject-oriented formal speci&#64257;cation language VDM++.","Formal software development, analysis, formal modeling","Formal Methods","VDM-SL, VDM++","Open source, GPL license.",41,41,41,41);address41 : Address = mk_Address("Sumitomo Fudosan Shinjuku Oak Tower, 6-8-1, Nishi-Shinjuku, Shinjuku-ku","163-6020","TOKYO","","JAPAN");contact41 : Contact = mk_Contact("Shin Sahara","Telecommunication Group, CSK Systems Corporation",address41,"ss@shinsahara.com","","","www.csk.com");functionality41 : Functionality = mk_Functionality(<YES>,<YES>,<YES>,<SOME>,<NO>,<SOME>,<YES>,<YES>,<NO>,<NO>,<YES>);systemRequirement41 : SystemRequirements = mk_SystemRequirements("All","","","");date41 : Date = mk_Date(01,01,2008);documentation41 : Documentation = mk_Documentation("","http://www.vdmbook.com/twiki/bin/view","","www.vdmtools.jp","");technicalDetails41 : TechnicalDetails = mk_TechnicalDetails("8.0","Development plans:

    * Test case generator from proof obligation (model based test);
    * Eclipse-nize of VDMTools;
    * XMI interface;
    * Using AST by user. 
    * VICE improvement;
    * VDM with SAT/SMT solver. 
    * \"Japanizing\" error messages;
    * Alternative tool of CORBA interface. ",date41,"None.",documentation41);
tool51 : Tool = mk_Tool("CJZ","This is a Maple based tool that can either automatically compute a closed form for simple programs containing loops, or considerably simplify that task by computing polynomial invariants of such programs. The idea is based on a technique for verifications and analysis of computer programs based on a calculus of relations that was proposed by Floyd in 1967. The main difference is that instead of representing a program as a predicate, we translate it into an equivalent set of symbolic recurrence relations, and then use a technique called symbolic execution. 
	Our symbolic analysis can be seen as a kind of compiler which translates the input program (in a subset of Maple) into a symbolic expression, and then transforms this expression into an output expression.
	Since we do not represent programs as predicates but as symbolic recurrence relations, this induces a definite restriction on the structure of the programs that can be handled. Despite this restriction the method is still applicable to a large variety of numerical programs. 

","Proving correctness of numerical imperative non-recursive programs","Numerical non-recursive programs","Maple 9.5","Open Source",51,51,51,51);address51 : Address = mk_Address("1280 Main Street West","L8S 4K1","Hamilton","Ontario","Canada");contact51 : Contact = mk_Contact("Ryszard Janicki","McMaster University",address51,"janicki@mcmaster.ca","1 905 6279862","1-905-524 0340","");functionality51 : Functionality = mk_Functionality(<SOME>,<SOME>,<NO>,<YES>,<NO>,<NO>,<NO>,<NO>,<SOME>,<NO>,<NO>);systemRequirement51 : SystemRequirements = mk_SystemRequirements("Windows","Pentium III","512M","at least 500M");date51 : Date = mk_Date(01,01,2008);documentation51 : Documentation = mk_Documentation("","on the website","on the website","http:/www/cas.mcmaster.ca/~cas724/tool/index.html","");technicalDetails51 : TechnicalDetails = mk_TechnicalDetails("1.0","We would like to loosen the restrictions for while loop we have now. ",date51,"Maple",documentation51);
tool56 : Tool = mk_Tool("CZT","","Integrated Development Environment for Z, including editors, typecheckers, markup converters, animator etc.","Support for editing and animating Z, Object-Z and Circus specifications.","Z, Object-Z, and Circus","open source (GPL)",56,56,56,56);address56 : Address = mk_Address("Private Bag 3105","3240","Hamilton","","New Zealand");contact56 : Contact = mk_Contact("Mark Utting","The University of Waikato",address56,"marku@cs.waikato.ac.nz","+64 7 838 4791","+64 7 858 5095","http://czt.sourceforge.net");functionality56 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<NO>,<SOME>,<YES>,<YES>,<YES>,<NO>,<NO>,<NO>);systemRequirement56 : SystemRequirements = mk_SystemRequirements("Any  (requires Java 1.6)","Any","256Mb","20Mb");date56 : Date = mk_Date(03,07,2007);documentation56 : Documentation = mk_Documentation("","","","http://czt.sourceforge.net","");technicalDetails56 : TechnicalDetails = mk_TechnicalDetails("1.0","Release 1.1 will include a more robust Eclipse plugin and better animator facilities.  Expected date: April-May 2008.",date56,"Java 1.6",documentation56);
tool57 : Tool = mk_Tool("FAUST","The FAUST toolset is a integrated tool suite supporting the goal-oriented modelling of systems at a formal level. The scope of the toolset is requirements engineering of mission critical systems in order to reach high assurance and avoid costly early design errors.

The language supported is KAOS, a two level language with both easy to understand semi-formal diagrammatic notations and a formal level with sound semantics.

The tools support validation through goal-based animation (slicing on critical properties), verification though model-checking and acceptance test cases generation. Tools are tightly integrated with one another: e.g. scenarios generated by the verification or acceptance tool can be replayed in the animation tool. More tools are under development, for example to link with the rest of industrial development using ADL or B-based formalisms.

The toolset is integrated with the Objectiver requirements engineering commercial tool and partly open on the Eclipse platform.","Early Formalisation, Verification and Validation of Mission Critical Systems","Requirements Engineering of critical systems, both for safety or security issues: aeronautics, ","KAOS","Based on the commercial Objectiver toolset.
Parly open source (meta-model).
Some modules available under Eclipse - under migration.",57,57,57,57);address57 : Address = mk_Address("rue des Frères Wright n°29/3 ","6041","Charleroi","","Belgium");contact57 : Contact = mk_Contact("Christophe Ponsard","CETIC",address57,"cp@cetic.be","+32 71 490 473","+32 71 490 799","http://faust.cetic.be");functionality57 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<NO>,<YES>,<YES>,<YES>,<YES>,<YES>,<YES>,<NO>);systemRequirement57 : SystemRequirements = mk_SystemRequirements("JAVA Platform","JVM","512MB recommanded","");date57 : Date = mk_Date(02,01,2008);documentation57 : Documentation = mk_Documentation("","A. van Lamsweerde, Systematic Requirements Engineering - From System Goals to UML Models to Software Specifications. Wiley, 2008.","RE, FMICS conference and FMSD journal","http://faust.cetic.be","");technicalDetails57 : TechnicalDetails = mk_TechnicalDetails("","Consolidation of Eclipse migration.
AADL connector.
Event-B connector.
",date57,"JAVA, nuSMV, Alloy, EMF",documentation57);
tool69 : Tool = mk_Tool("SPARK Toolset","The SPARK Language is an unambiguous contractualized subset of Ada designed expressly for the development of high-assurance software, with the main design goal being the provision of a sound verification framework basic on static analysis, Floyd/Hoare style VC generation, and theorem proving.  Anlayses inplemented by the toolset include subset analysis, information-flow analysis, VC Generation, and theorem proving.  Properties that can be established include secure information flow, static type safety, partial correctness and invariant safety or security properties.","High-assurance software development, including safety- and security-critical systems","Aerospace, Rail, Defence, Nuclear, High-Grade Secure Systems","SPARK Programming Language (contractualized, unambiguous subset of Ada)","Commercial.  Free trial version available in support of text book.",69,69,69,69);address69 : Address = mk_Address("20 Manvers Street","BA2 1PX","Bath","Avon","UK");contact69 : Contact = mk_Contact("SPARK Team","Praxis High Integrity Systems",address69,"sparkinfo@praxis-his.com","+44 1225 823829","+44 1225 469006","www.sparkada.com");functionality69 : Functionality = mk_Functionality(<YES>,<YES>,<YES>,<YES>,<NO>,<NO>,<YES>,<YES>,<NO>,<NO>,<YES>);systemRequirement69 : SystemRequirements = mk_SystemRequirements("Windows, Linux, Solaris, OSX","Intel, SPARC","512MB","40MB");date69 : Date = mk_Date(01,07,2007);documentation69 : Documentation = mk_Documentation("","Excellent textbook by John Barnes","Many - see www.sparkada.com","www.sparkada.com","");technicalDetails69 : TechnicalDetails = mk_TechnicalDetails("7.5","Increase language subset to include variant records.
Counter-example finding tool to support theorem prover.
Eclipse plug-in user-interface.
Support for Ada2005 features.",date69,"None in particuilar.  A standard Ada compiler (e.g. gcc) is needed to compile and build SPARK programs.",documentation69);
tool73 : Tool = mk_Tool("LEIRIOS Test Designer","LEIRIOS Test Dsigner is a pure model-based testing tools. The main features are:
- Modeling for test generation, model verification
- Business requirements traceability
- Automated test generation (test cases and executable test scripts)
- Publbication in test management and execution framework or tool (HP Quality Center, FitNess, JUnit...)","Model-Based Testing. LEIRIOS Test Designer is a pure model-based testing tool. From a formal behavior model, test cases and executable test scripts are generated and published in test management and execution tools. LEIRIOS Test Designer manages traceability from business requirements to generated tests.","IT applications : web applications, client-server, SOA, ERP.

eTransaction applications : smart card, electronic paiement, billing, ticketing...","UML/OCL --> UML 2.1 (subpart) & OCL 2.0 (subpart)","Commercial. 

Current version: LEIRIOS Test Designer v3.2",73,73,73,73);address73 : Address = mk_Address("18 rue Alain Savary","25000","Besancon","","France");contact73 : Contact = mk_Contact("Bruno LEGEARD","LEIRIOS",address73,"legeard@leirios.com","+33381255364","+33381506470","www.leirios.com");functionality73 : Functionality = mk_Functionality(<YES>,<YES>,<NO>,<NO>,<NO>,<NO>,<YES>,<YES>,<NO>,<YES>,<NO>);systemRequirement73 : SystemRequirements = mk_SystemRequirements("Windows (XP & Vista) - Linux","2 Ghz","2 Go ","50 Mo");date73 : Date = mk_Date(20,03,2008);documentation73 : Documentation = mk_Documentation("","\"Practical Model-Based Testing\" - Mark UTTING - Bruno LEGEARD - Morgan&Kauffmann - December 2006","","www.leirios.com","");technicalDetails73 : TechnicalDetails = mk_TechnicalDetails("LEIRIOS Test Designer 3.2","Scenario-based Testing
Risk-based Testing",date73,"Java (JRE 1.6)",documentation73);
